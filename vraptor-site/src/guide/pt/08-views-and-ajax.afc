[chapter View e Ajax]

[section Custom PathResolver]
Por padrão, para renderizar suas views, o VRaptor segue a convenção:

[java]
	public class ClientsController {
		public void list() {
			//...
		}
	}
[/java]

Este método acima renderizará a view %%/WEB-INF/jsp/clients/list.jsp%%.

No entanto, nem sempre queremos esse comportamento, e precisamos usar algum template engine,
como por exemplo, Freemarker ou Velocity, e precisamos mudar essa convenção.

Um jeito fácil de mudar essa convenção é estendendo a classe %%DefaultPathResolver%%:

[java]
	@Component
	public class FreemarkerPathResolver extends DefaultPathResolver {
		protected String getPrefix() {
			return "/WEB-INF/freemarker/";
		}
		
		protected String getExtension() {
			return "ftl";
		}
	}
[/java]

Desse jeito, a lógica iria renderizar a view %%/WEB-INF/freemarker/clients/list.ftl%%.
Se ainda assim isso não for o suficiente você pode implementar a interface %%PathResolver%%
e fazer qualquer convenção que você queira, não esquecendo de anotar a classe com @Component.

[section View]

Se você quiser mudar a view de alguma lógica específica você pode usar o objeto Result:

[java]
	@Resource
	public class ClientsController {
		
		private final Result result;
		
		public ClientsController(Result result) {
			this.result = result;
		}
		
		public void list() {}
		
		public void save(Client client) {
			//...
			this.result.use(Results.logic()).redirectTo(ClientsController.class).list();
		}
	}
[/java]

Por padrão existem estes tipos de views implementadas:

[list]
	* Results.logic(), que vai redirecionar para uma outra lógica qualquer do sistema
	* Results.page(), que vai redirecionar diretamente para uma página, podendo ser um
	jsp, um html, ou qualquer uri relativa ao web application dir, ou ao contexto da aplicação.
	* Results.http(), que manda informações do protocolo HTTP como status codes e headers.
	* Results.referer(), que usa o header Referer para fazer redirects ou forwards.
	* Results.nothing(), apenas retorna o código de sucesso (HTTP 200 OK).
	* Results.xml(), serializa objetos em xml.
	* Results.json(), serializa objetos em json.
	* Results.representation(), serializa objetos em um formato determinado pela requisição
	 (parametro _format ou header Accept)
[/list]

[section Atalhos no Result]

Alguns redirecionamentos são bastante utilizados, então foram criados atalhos para eles.
Os atalhos disponíveis são:
[list]
* result.forwardTo("/some/uri") ==> result.use(page()).forward("/some/uri");
* result.forwardTo(ClientController.class).list() ==> result.use(logic()).forwardTo(ClientController.class).list();
* result.redirectTo(ClientController.class).list() ==> result.use(logic()).redirectTo(ClientController.class).list();
* result.of(ClientController.class).list() ==> result.use(page()).of(ClientController.class).list();
[/list]
Além disso, se o redirecionamento é para um método do mesmo controller, podemos usar:
[list]
* result.forwardTo(this).list() ==> result.use(logic()).forwardTo(this.getClass()).list();
* result.redirectTo(this).list() ==> result.use(logic()).redirectTo(this.getClass()).list();
* result.of(this).list() ==> result.use(page()).of(this.getClass()).list();
[/list]


[section Redirecionamento e forward]

No VRaptor3, podemos tanto redirecionar ou fazermos um forward do usuário para uma outra lógica ou um jsp.
A grande diferença entre fazer um redirecionamento (redirect) e um forward é que o redirecionamento acontece
no lado do cliente, e o forward acontece no lado do servidor.

Um bom exemplo de uso do redirect, é o padrão 'redirect-after-post', por exemplo, quando você adiciona um cliente,
e quer retornar para a listagem dos clientes, porém, não quer permitir que o usuário atualize a página (F5) e 
reenvie toda a requisição, acarretando em dados duplicados.

No caso do forward, um exemplo de uso é quando você possui uma validação e essa validação falhou, geralmente
você quer que o usuário continue na mesma tela do formulário com os dados da requisição preenchidos.

[box Escopo Flash automático]
Se você adicionar objetos no Result e fizer um Redirect, esses objetos estarão disponíveis na
próxima requisição.
[java]
public void adiciona(Cliente cliente) {
	dao.adiciona(cliente);
	result.include("mensagem", "Cliente adicionado com sucesso");
	result.redirectTo(ClientesController.class).lista();
}
[/java]

lista.jsp:
[xml]
...
<div id="mensagem">
   <h3>${mensagem}</h3>
</div>
...
[/xml]

[/box]

[section Accepts e o parâmetro _format]

Muitas vezes precisamos renderizar formatos diferentes para uma mesma lógica. Por exemplo queremos
retornar um JSON, ao invés de um HTML.
Para fazer isso, podemos definir o Header Accepts da requisição para que aceite o tipo desejado, ou
colocar um parâmetro %%_format%% na requisição.

Se o formato for JSON, a view renderizada por padrão será: %%/WEB-INF/jsp/{controller}/{logic}.json.jsp%%,
ou seja, em geral será renderizada a view: %%/WEB-INF/jsp/{controller}/{logic}.{formato}.jsp%%.
Se o formato for HTML você não precisa colocá-lo no nome do arquivo.

O parâmetro %%_format%% tem prioridade sobre o header Accepts.

[section Ajax: construindo na view]

Para devolver um JSON na sua view, basta que sua lógica disponibilize o objeto para a view, e
dentro da view você forme o JSON como desejar. Como no exemplo, o seu %%/WEB-INF/jsp/clients/load.json.jsp%%:
 
[code]
{ nome: '${client.name}', id: '${client.id}' }
[/code]

E na lógica:

[java]
	@Resource
	public class ClientsController {
		
		private final Result result;
		private final ClientDao dao;
		
		public ClientsController(Result result, ClientDao dao) {
			this.result = result;
			this.dao = dao;
		}
		
		public void load(Client client) {
			result.include("client", dao.load(client));
		}
	}
[/java]


[section Ajax: Versão programática]

Se você quiser que o VRaptor serialize automaticamente seus objetos para xml ou json, você pode
escrever em sua lógica:
[java]
	import static br.com.caelum.vraptor.view.Results.*;
	@Resource
	public class ClientsController {
		
		private final Result result;
		private final ClientDao dao;
		
		public ClientsController(Result result, ClientDao dao) {
			this.result = result;
			this.dao = dao;
		}
		
		public void loadJson(Cliente cliente) {
			result.use(json()).from(cliente).serialize();
		}
		public void loadXml(Cliente cliente) {
			result.use(xml()).from(cliente).serialize();
		}
	}
[/java]

Os resultados vãos ser parecidos com:

[code]
{"cliente": {
	"nome": "Joao"
}}
[/code]
[code]
<cliente>
	<nome>Joao</nome>
</cliente>
[/code]

Por padrão, apenas campos de tipos primitivos serão serializados (String, números, enums, datas),
se você quiser incluir um campo de tipo não primitivo você precisa incluí-lo explicitamente:
[java]
	result.use(json()).from(cliente).include("endereco").serialize();
[/java]

vai resultar em algo parecido com:

[code]
{"cliente": {
	"nome": "Joao",
	"endereco" {
		"rua": "Vergueiro"
	}
}}
[/code]

Você pode também excluir os campos de tipo primitivo da serialização:
[java]
	result.use(json()).from(usuario).exclude("senha").serialize();
[/java]

vai resultar em algo parecido com:

[code]
{"usuario": {
	"nome": "Joao",
	"login": "joao"
}}
[/code]

A implementação padrão é baseada no XStream, então é possível configurar a serialização
via anotações ou configurações diretas ao XStream, bastando criar a classe:
[java]
@Component
public class CustomXMLSerialization extends XStreamXMLSerialization {
//or public class CustomJSONSerialization extends XStreamJSONSerialization {
	//delegate constructor
	
	@Override
	protected XStream getXStream() {
		XStream xStream = super.getXStream();
		//suas configurações ao XStream aqui
		return xStream;
	}
}
[/java]

[title Serializando Collections]

Ao serializar coleções, o padrão é colocar a tag "list" em volta dos elementos:

[java]
	List<Cliente> clientes = ...;
	result.use(json()).from(clientes).serialize();
	//ou
	result.use(xml()).from(clientes).serialize();
[/java]

vai resultar em algo como:
[code]
{"list": [
	{
		"nome": "Joao"
	},
	{
		"nome": "Maria"
	}
]}
[/code]
ou 
[code]
<list>
	<cliente>
		<nome>Joao</nome>
	</cliente>
	<cliente>
		<nome>Maria</nome>
	</cliente>
</list>
[/code]

É possível personalizar o elemento de fora usando o método:
[java]
	List<Cliente> clientes = ...;
	result.use(json()).from(clientes, "clientes").serialize();
	//ou
	result.use(xml()).from(clientes, "clientes").serialize();
[/java]
vai resultar em algo como:
[code]
{"clientes": [
	{
		"nome": "Joao"
	},
	{
		"nome": "Maria"
	}
]}
[/code]
ou 
[code]
<clientes>
	<cliente>
		<nome>Joao</nome>
	</cliente>
	<cliente>
		<nome>Maria</nome>
	</cliente>
</clientes>
[/code]

Os includes e excludes funcionam como se você os estivesse aplicando num elemento de dentro da lista.
Por exemplo se você quiser incluir o endereço no cliente:
[java]
	List<Cliente> clientes = ...;
	result.use(json()).from(clientes).include("endereco").serialize();
[/java]
com resultado:
[code]
{"list": [
	{
		"nome": "Joao",
		"endereco": {
			"rua": "Vergueiro, 3185"
		}
	},
	{
		"nome": "Maria",
		"endereco": {
			"rua": "Vergueiro, 3185"
		}
	}
]}
[/code]