[chapter Injeção de dependências]

O VRaptor está fortemente baseado no conceito de injeção de dependências uma vez que chega até mesmo a
utilizar dessa idéia para juntar seus componentes internos.

O conceito básico por trás de Dependency Injection (DI) é que você não deve buscar aquilo que deseja acessar
mas tudo o que deseja acessar deve ser fornecido para você.

Isso se traduz, por exemplo, na passagem de componentes através do construtor de seus controladores.
Imagine que seu controlador de clientes necessita acessar um Dao de clientes. Sendo assim, especifique claramente
essa necessidade:

[java]
@Component
public class ClienteController {
	private final ClienteDao dao;
	
	public ClienteController(ClienteDao dao) {
		this.dao = dao;
	}

	@Post
	public void adiciona(Cliente cliente) {
		this.dao.adiciona(cliente);
	}
	
}
[/java]

E anote também o componente ClienteDao como sendo controlado pelo vraptor:

[java]
@Component
public class ClienteDao {
}
[/java]

A partir desse instante, o vraptor fornecerá uma instância de ClienteDao para seu ClienteController
sempre que precisar instanciá-lo. Vale lembrar que o VRaptor honrará o escopo de cada componente.
Por exemplo, se ClienteDao fosse de escopo Session (@SessionScoped), seria criada uma única instância desse
componente por sessão. (note que é provavelmente errado usar um dao no escopo de session, isto é um mero exemplo).

[section ComponentFactory]

Em diversos momentos queremos que nossos componentes recebam componentes de outras bibliotecas.
Nesse caso não temos como alterar o código fonte da biblioteca para adicionar a anotação @Component (além de possíveis
alterações requeridas na biblioteca).

O exemplo mais famoso envolve adquirir uma Session do Hibernate. Nesses casos precisamos criar um componente
que possui um único papel: fornecer instâncias de Session para os componentes que precisam dela.

O VRaptor possui uma interface chamada ComponentFactory que permite que suas classes possuam tal responsabilidade.
Implementações dessa interface definem um único método. Veja o exemplo a seguir, que inicializa o Hibernate na construção
e utiliza essa configuração para fornecer sessões para nosso projeto:

[java]
@Component
@ApplicationScoped
public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {

	private SessionFactory factory;
	
	@PostConstruct
	public void create() {
		factory = new AnnotationConfiguration().configure();
	}
	
	public SessionFactory getInstance() {
		return factory;
	}
	
	@PreDestroy
	public void destroy() {
		factory.close();
	}
	
}

@Component
@RequestScoped
public class SessionCreator implements ComponentFactory<Session> {

	private final SessionFactory factory;
	private Session session;

	public SessionCreator(SessionFactory factory) {
		this.factory = factory;
	}

	@PostConstruct
	public void create() {
		this.session = factory.openSession();
	}

	public Session getInstance() {
		return session;
	}

	@PreDestroy
	public void destroy() {
		this.session.close();
	}
	
	
}
[/java]

Essas implementações já estão disponíveis no código do VRaptor. Para usá-la veja o capítulo de utils.

[section Providers]
Por trás dos panos, o VRaptor utiliza um provider de DI específico. Por padrão o vraptor vêm com suporte 
ao uso interno do Picocontainer ou do Spring IoC.

Cada implementação disponibiliza tudo o que você encontra na documentação do vraptor, mas acaba por fornecer
também pontos de extensão diferentes, claro.

Para que os providers possam encontrar suas classes anotadas com as anotações do VRaptor,
você precisa colocar o seguinte parâmetro no seu web.xml, com o pacote base da sua aplicação:

[xml]
	<context-param>
		<param-name>br.com.caelum.vraptor.packages</param-name>
		<param-value>br.com.suaempresa.suaapplicacao</param-value>
	</context-param>
[/xml]

É possível colocar mais de um pacote básico, separando os pacotes por vírgula (sem espaços):
[xml]
<context-param>
	<param-name>br.com.caelum.vraptor.packages</param-name>
	<param-value>br.com.suaempresa.suaapplicacao,br.com.outro.pacote</param-value>
</context-param>
[/xml]

É possível, ainda, colocar classes anotadas da sua aplicação dentro de jars, desde que os jars
incluam as entradas de diretório ("Add directory entries" no eclipse, ou ant sem a
opção "files only").


[section Spring]

Ao utilizar o Spring, você ganha todas as características e componentes prontos do Spring para uso dentro do
VRaptor, isto é, todos os componentes que funcionam com o Spring DI/Ioc, funcionam com o VRaptor. Nesse caso,
todas as anotações.

Você não precisa fazer nada para usar o Spring, pois é o container padrão.

O VRaptor vai usar suas configurações do Spring, caso você já o tenha configurado no seu projeto (
os listeners e o applicationContext.xml). Caso o VRaptor não tenha encontrado sua configuração, veja
o capítulo de configurações avançadas.

[section Pico Container]

Ao utilizar o Picocontainer por baixo do VRaptor, você poderá acessar o pico diretamente para fazer 
configurações avançadas que desejar.

Para utilizar o Picocontainer como provider de sua aplicação, basta colocar no seu arquivo web.xml:

[xml]
	<context-param>
		<param-name>br.com.caelum.vraptor.provider</param-name>
		<param-value>br.com.caelum.vraptor.ioc.pico.PicoProvider</param-value>
	</context-param>
[/xml]

[section Seu próprio provider]

Você também pode criar seu próprio Provider, seja para adicionar novas características avançadas a implementação do Picocontainer ou do Spring, ou ainda para se basear em outro contâiner de DI que seja de sua preferência.
