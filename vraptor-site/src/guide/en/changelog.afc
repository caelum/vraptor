[chapter ChangeLog]

[section 3.1.2 (in dev]
[list]
* Supports encoding for file uploads in Google App Engine
[/list]


[section 3.1.1]
[list]
* VRaptor 3 was published on Maven central repository!
[xml]
<dependency>
	<groupId>br.com.caelum</groupId>
	<artifactId>vraptor</artifactId>
	<version>3.1.1</version>
</dependency>
[/xml]
* new implementation for Outjector. Now when there are validation errors actual objects are replicated
to the next request, not string parameters as before, preventing class cast exceptions on taglibs.
* bugfixes on VRaptor 2 compatibility
[/list]
[section 3.1.0]
[list]
* it is now possible to serialize collections via result.use(xml()) or result.use(json()).
* new scope: @PrototypeScoped, that creates a new instance of annotated class whenever it is requested. 
* new view: result.use(Results.representation()).from(object).serialize();
This view tries to discover the request format (through _format or Accept header)
and then serialize the given object in this format. For now only xml and json are supported, but you can
add a serializer for any format you like. If there is no format given, or it is unsupported the default
jsp page will be shown.
* bugfix: Flash scope parameters are now set with arrays, so it will work on GAE
* bugfix: validation.onErrorUse(...) now works with all default Results
* bugfix: when returning a null Download/File/InputStream will not throw NullPointerException if any redirect
  has occurred (result.use(...)).
* bugfix: result.use(page()).redirect("...") now includes the contextPath if given url starts with /
* bugfix: one can create generic Controllers now:
[java]
 public class ClientsController extends GenericController<Client> {
 
 }
 public class GenericController<T> {
    public T show(Long id) {...} // exported variable will be called t
    public void add(T obj) {...} // request parameters will be like obj.field 
 }
[/java]
* you can annotate your controller class with @Path, and all methods URIs will have the path specified 
as prefix.:
[java]
@Resource
@Path("/prefix")
public class MyController {
	//URI: /prefix/aMethod
	public void aMethod() {...}
	
	//URI: /prefix/relative
	@Path("relative")
	public void relativePath() {...}

	//URI: /prefix/absolute
	@Path("/absolute")
	public void absolutePath() {...}
}
[/java]
* @Path now supports regexes: %%@Path("/abc/{abc:a+b+c+}")%% will match URIs like:
[code]
/abc/abc
/abc/aaaaabbcccc
/abc/abbc
[/code]
whenever the parameter matches the %%a+b+c+%% regex.

* New methods on %%Result%% interface as shortcuts for most common operations:
	[list]
	* result.forwardTo("/some/uri") ==> result.use(page()).forward("/some/uri");
	* result.forwardTo(ClientController.class).list() ==> result.use(logic()).forwardTo(ClientController.class).list();
	* result.redirectTo(ClientController.class).list() ==> result.use(logic()).redirectTo(ClientController.class).list();
	* result.of(ClientController.class).list() ==> result.use(page()).of(ClientController.class).list();
	[/list]
  Furthermore, if one are redirecting to a method on the same controller, one can use:
  	[list]
  	* result.forwardTo(this).list() ==> result.use(logic()).forwardTo(this.getClass()).list();
	* result.redirectTo(this).list() ==> result.use(logic()).redirectTo(this.getClass()).list();
	* result.of(this).list() ==> result.use(page()).of(this.getClass()).list();
  	[/list]
* VRaptor will scan for all resources and components inside WEB-INF/classes automatically
* support for servlets 3.0, so it is not necessary configure the filter anymore (webfragment feature)
* using latest spring version (3.0.0) and also hibernate (for examples and so on). google collections updated to final version
* blank project now working for wtp 3.5 and using vraptor 3.1 new features	
* blank project much easier to import under wtp now. logging and other configs adjusted
* bugfix: mimetypes now work for webkit browsers, priorizing html when no order specified
* bugfix: in case of validation erros, the request parameters are outjected as Strings, not Maps as before.
It prevents ClassCastExceptions when using taglibs, like fmt:formatNumber.
[/list]

[section 3.0.2]
[list]
* servlet 2.4 containers are now supported
* bugfix: Results.referer() now implements View
* bugfix: content-type is now set when using File/InputStreamDownload
* removed java 6 api calls
* new providers, spring based: HibernateCustomProvider and JPACustomProvider. These providers
  register optional Hibernate or JPA components.
* bugfix: converters are not throwing exceptions when there is no ResourceBundle configured.
* bugfix: method return values are now included on result when forwarding.
* bugfix: request parameters are now kept when there is a validation error.
* bugfix: throwing exception when paranamer can't find parameters metadata, so you can recover
for this problem.
* initial support to xml and json serialization:
[java]
  result.use(Results.json()).from(myObject).include(...).exclude(...).serialize();
  result.use(Results.xml()).from(myObject).include(...).exclude(...).serialize();
[/java] 
[/list]


[section 3.0.1]
[list]
* paranamer upgraded to version 1.5 (Update your jar!)
* jars split in optional and mandatory on vraptor-core
* dependencies are now explained on vraptor-core/libs/mandatory/dependencies.txt and
  vraptor-core/libs/optional/dependencies.txt
* you can set now your application character encoding on web.xml through the context-param
	br.com.caelum.vraptor.encoding
* new view: Referer view:
  result.use(Results.referer()).redirect();
* Flash scope:
  [java]
  result.include("aKey", anObject);
  result.use(logic()).redirectTo(AController.class).aMethod();
  [/java]
  objects included on Result will survive until next request when a redirect happens.
* @Path annotation supports multiple values (String -> String[])
* Result.include returns this to enable a fluent interface (result.include(...).include(...))
* Better exception message when there is no such http method as requested  
* FileDownload registers content-length
* Solving issue 117: exposing null when null returned (was exposing "ok")
* Solving issue 109: if you have a file %%/path/index.jsp%%, you can access it now through
	%%/path/%%, unless you have a controller that handles this URI.
* When there is a route that can handle the request URI, but doesn't allow the requested HTTP method,
  VRaptor will send a 405 -> Method Not Allowed HTTP status code, instead of 404.
* A big refactoring on Routes internal API.
[/list]

[section 3.0.0]
[list]
* ValidationError renamed to ValidationException
* result.use(Results.http()) for setting headers and status codes of HTTP protocol
* bug fixes
* documentation
* new site

[/list]
[section 3.0.0-rc-1]
[list]
* example application: mydvds
* new way to add options components into VRaptor:
[java]
public class CustomProvider extends SpringProvider {
	
	@Override
	protected void registerCustomComponents(ComponentRegistry registry) {
		registry.registry(OptionComponent.class, OptionComponent.class);
	}
}
[/java]

* Utils: HibernateTransactionInterceptor and JPATransactionInterceptor
* Full application example inside the docs
* English docs
[/list]
[section 3.0.0-beta-5]
[list]
* New way to do validations:
  [java]
  	public void visualiza(Client client) {
  		validator.checking(new Validations() {{
  			that(client.getId() != null, "id", "id.should.be.filled");
  		}});
  		validator.onErrorUse(page()).of(ClientsController.class).list();
  		
  		//continua o metodo
  	}
  [/java]
* UploadedFile.getFile() now returns InputStream.
* EntityManagerCreator and EntityManagerFactoryCreator
* bugfixes

[/list]
[section 3.0.0-beta-4]
[list]
* New result: result.use(page()).of(MyController.class).myLogic() renders the default view
	(/WEB-INF/jsp/meu/myLogica.jsp) without execting the logic.
*	Mock classes for testing: MockResult e MockValidator, to make easier to unit test your logics.
	They ignores the fluent interface calls and keep the parameters included under the result and
	the validation errors.
*	The URIs passed to result.use(page()).forward(uri) and result.use(page()).redirect(uri)
	can't be logic URIs. Use forwards or redirects from result.use(logic()) instead.
*	Parameters passed to URI's now accepts pattern-matching:
	[list]
	* Automatic: if we have the URI /clients/{client.id} and client.id is a Long, the {client.id} parameter 
		will only match numbers, so, the URI /clients/42 matches, but the /clients/random doesn't matches.
		This works for all numeric types, booleans and enums. VRaptor will restrict the possible values.
	* Manual: in your CustomRoutes you can do:
		routeFor("/clients/{client.id}").withParameter("client.id").matching("\\d{1,4}")
  			.is(ClienteController.class).mostra(null);
  	which means you can restrict values for the parameters you want by regexes at the matching method.
  [/list]
* Converters for joda-times's LocalDate and LocalTime comes by default.
* When Spring is the IoC provider, VRaptor tries to find your application's spring to use as
	a father container. This search is made by one of the following two ways:
	[list]
	* WebApplicationContextUtils.getWebApplicationContext(servletContext), when you have Spring's listeners
	configured.
	* applicationContext.xml inside the classpath
	[/list]
	If it's not enough, you can implements the SpringLocator interface and enable the Spring's ApplicationContext
	used by your application. 
*	Utils:
	[list]
	* SessionCreator and SessionFactoryCreator to create Hibernate's Session and SessionFactory 
	to your registered components.
	* EncodingInterceptor, to change you default encoding.
	[/list]
* several bugfixes and docs improvements.
[/list]
[section 3.0.0-beta-3]
[list]
* Spring becomes the default IoC provider
* the applicationContext.xml under the classpath is used as Spring initial configuration, if it exists.
* improved docs at http://vraptor.caelum.com.br/documentacao
* small bugfixes and optimizations
[/list]
